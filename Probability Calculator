import copy
import random

class Hat:
  def __init__(self, **kwargs):
    self.contents = []
    for color, count in kwargs.items():
      for i in range(count):
        self.contents.append(color)

  def draw(self, num_balls):
    balls_drawn = []
    if num_balls >= len(self.contents):
      balls_drawn = self.contents
      self.contents = []
    else:
      for i in range(num_balls):
        ball_index = random.randint(0, len(self.contents) - 1)
        balls_drawn.append(self.contents.pop(ball_index))
    return balls_drawn

def experiment(hat, expected_balls, num_balls_drawn, num_experiments):
  num_successful_experiments = 0
  for i in range(num_experiments):
    hat_copy = copy.deepcopy(hat)
    balls_drawn = hat_copy.draw(num_balls_drawn)
    success = True
    for color, count in expected_balls.items():
      if balls_drawn.count(color) < count:
        success = False
        break
    if success:
      num_successful_experiments += 1
  return num_successful_experiments / num_experiments
from prob_calculator import Hat, experiment

hat = Hat(blue=5, red=4, green=2)
probability = experiment(hat=hat, expected_balls={"red":1,"green":2}, num_balls_drawn=4, num_experiments=10000)
print(probability)
